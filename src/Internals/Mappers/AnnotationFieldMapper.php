<?php

namespace OneOfZero\Json\Internals\Mappers;

use Doctrine\Common\Annotations\Annotation;
use OneOfZero\BetterAnnotations\Annotations as AnnotationReader;
use OneOfZero\Json\Annotations;
use OneOfZero\Json\Exceptions\SerializationException;
use OneOfZero\PhpDocReader\PhpDocReader;
use ReflectionParameter;

class AnnotationFieldMapper extends AbstractFieldMapper
{
	/**
	 * @var AnnotationReader $annotationReader
	 */
	private $annotationReader;

	/**
	 * @var PhpDocReader $docReader
	 */
	private $docReader;

	public function __construct(AnnotationReader $reader)
	{
		$this->annotationReader = $reader;
		$this->docReader = new PhpDocReader(true);
	}

	/**
	 * @return string
	 */
	public function getName()
	{
		/** @var Annotations\AbstractName $nameAnnotation */
		$nameAnnotation = $this->getAnnotation(Annotations\AbstractName::class);
		if ($nameAnnotation)
		{
			return $nameAnnotation->name;
		}

		return parent::getName();
	}


	/**
	 * @return string|null
	 */
	public function getType()
	{
		// Try determining from @Type annotation
		$typeAnnotation = $this->getAnnotation(Annotations\Type::class);
		if ($typeAnnotation)
		{
			return $typeAnnotation->value;
		}

		// Try determining from phpdoc (@var, @return and @param)
		if ($this->isClassProperty())
		{
			$type = $this->docReader->getPropertyClass($this->target);
			if ($type !== null)
			{
				return $type;
			}
		}

		if ($this->isGetter())
		{
			$type = $this->docReader->getMethodReturnClass($this->target);
			if ($type !== null)
			{
				return $type;
			}
		}

		if ($this->isSetter())
		{
			/** @var ReflectionParameter $setter */
			list($setter) = $this->target->getParameters();

			$type = $this->docReader->getParameterClass($setter);
			if ($type !== null)
			{
				return $type;
			}
		}

		// Fallback to parent strategy
		return parent::getType();
	}

	/**
	 * @return bool
	 */
	public function isArray()
	{
		if ($this->hasAnnotation(Annotations\IsArray::class))
		{
			return true;
		}

		return parent::isArray();
	}


	/**
	 * {@inheritdoc}
	 *
	 * @throws SerializationException
	 */
	public function isGetter()
	{
		if (!$this->hasAnnotation(Annotations\Getter::class))
		{
			return parent::isGetter();
		}

		$paramCount = $this->target->getNumberOfRequiredParameters();

		if ($paramCount > 0)
		{
			throw new SerializationException("Field {$this->target->name} has {$paramCount} required parameters. Fields mapped with the @Getter annotation must have no required parameters.");
		}

		return true;
	}

	/**
	 * {@inheritdoc}
	 *
	 * @throws SerializationException
	 */
	public function isSetter()
	{
		if (!$this->hasAnnotation(Annotations\Setter::class))
		{
			return parent::isSetter();
		}

		if ($this->target->getNumberOfParameters() === 0)
		{
			// Valid setters must have at least one parameter, and at most one required parameter
			throw new SerializationException("Field {$this->target->name} has no parameters. Fields mapped with the @Setter annotation must have at least one parameter.");
		}

		$paramCount = $this->target->getNumberOfRequiredParameters();

		if ($paramCount > 1)
		{
			throw new SerializationException("Field {$this->target->name} has {$paramCount} required parameters. Fields mapped with the @Setter annotation must have one required parameter at most.");
		}

		return true;
	}

	/**
	 * @return bool
	 */
	public function isIncluded()
	{
		if ($this->hasAnnotation(Annotations\Ignore::class))
		{
			return false;
		}

		if ($this->parent->wantsExplicitInclusion() && $this->hasAnnotation(Annotations\AbstractName::class))
		{
			return true;
		}

		return parent::isIncluded();
	}

	public function isReference()
	{
		return parent::isReference(); // TODO: Change the autogenerated stub
	}

	public function isReferenceLazy()
	{
		return parent::isReferenceLazy(); // TODO: Change the autogenerated stub
	}

	public function hasSerializingCustomConverter()
	{
		return parent::hasSerializingCustomConverter(); // TODO: Change the autogenerated stub
	}

	public function hasDeserializingCustomConverter()
	{
		return parent::hasDeserializingCustomConverter(); // TODO: Change the autogenerated stub
	}

	public function getSerializingCustomConverterType()
	{
		return parent::getSerializingCustomConverterType(); // TODO: Change the autogenerated stub
	}

	public function getDeserializingCustomConverterType()
	{
		return parent::getDeserializingCustomConverterType(); // TODO: Change the autogenerated stub
	}

	public function doesSerialization()
	{
		return parent::doesSerialization(); // TODO: Change the autogenerated stub
	}

	public function doesDeserialization()
	{
		return parent::doesDeserialization(); // TODO: Change the autogenerated stub
	}


	/**
	 *
	 */
	public function map()
	{
		parent::map();

		// Run phpDocumentor parser here; annotations override



		/** @var Annotations\Property $propertyAnnotation */
		$propertyAnnotation = $this->getAnnotation(Annotations\Property::class);
		if ($propertyAnnotation)
		{
			$this->isProperty = true;
			$this->serialize = $propertyAnnotation->serialize;
			$this->deserialize = $propertyAnnotation->deserialize;
		}

		/** @var Annotations\IsReference $referenceAnnotation */
		$referenceAnnotation = $this->getAnnotation(Annotations\IsReference::class);
		if ($referenceAnnotation)
		{
			$this->isReference = true;
			$this->isReferenceLazy = $referenceAnnotation->lazy;
		}

		/** @var Annotations\CustomConverter $converterAnnotation */
		$converterAnnotation = $this->getAnnotation(Annotations\CustomConverter::class);
		if ($converterAnnotation)
		{
			$this->hasCustomConverter = true;
			$this->customConverterClass = $converterAnnotation->value;
			$this->customConverterSerializes = $converterAnnotation->serialize;
			$this->customConverterDeserializes = $converterAnnotation->deserialize;
		}
	}

	/**
	 * @param string $annotationClass
	 * @return bool
	 */
	private function hasAnnotation($annotationClass)
	{
		return $this->annotationReader->has($this->target, $annotationClass);
	}

	/**
	 * @param string $annotationClass
	 * @return Annotation|null
	 */
	private function getAnnotation($annotationClass)
	{
		return $this->annotationReader->get($this->target, $annotationClass);
	}
}

